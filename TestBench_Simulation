
module fifo_tb;

// Testbench parameters
parameter depth = 16;
parameter data_width = 8;
parameter ptr_width = 5;

// Testbench signals
reg clk;
reg rst;
reg write_en;
reg read_en;
reg [data_width-1:0] data_in;
wire [data_width-1:0] data_out;
wire empty;
wire full;

// Instantiate the FIFO
fifo #(depth, data_width, ptr_width) fifo_inst (
    .clk(clk),
    .rst(rst),
    .write_en(write_en),
    .read_en(read_en),
    .data_in(data_in),
    .data_out(data_out),
    .empty(empty),
    .full(full)
);

// Clock generation
always #5 clk = ~clk; // 100 MHz clock

// Testbench initialization
initial begin
    // Initialize signals
    clk = 0;
    rst = 1;
    write_en = 0;
    read_en = 0;
    data_in = 0;

    // Reset the FIFO
    #10;
    rst = 0;
    
    // Test 1: Write some data to the FIFO
    #10;
    write_en = 1;
    data_in = 8'hAA;
    #10;
    data_in = 8'hBB;
    #10;
    data_in = 8'hCC;
    #10;
    data_in = 8'hDD;
    #10;
    write_en = 0;

    // Test 2: Read data from the FIFO
    #20;
    read_en = 1;
    #10;
    read_en = 0;

    // Test 3: Empty condition
    #20;
    read_en = 1;
    #10;
    read_en = 0;

    // End the simulation
    #100;
    $finish;
end

// Monitor signals
initial begin
    $monitor("Time: %0d, Write Enable: %b, Read Enable: %b, Data In: %h, Data Out: %h, Empty: %b, Full: %b",
              $time, write_en, read_en, data_in, data_out, empty, full);
end

endmodule

